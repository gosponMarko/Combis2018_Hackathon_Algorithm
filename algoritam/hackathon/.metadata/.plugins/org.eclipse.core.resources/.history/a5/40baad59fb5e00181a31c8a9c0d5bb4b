import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;


public class Main {

	static ArrayList<Donor> allDonors;
	static ArrayList<Donor> availableDonors;
	static ArrayList<Integer> IDs;
	static String[] bloodTypes = {"OM", "OP", "AM", "AP", "BM", "BP", "ABM", "ABP"};
	static int[] minimum = {38,115,46,100,38,23,8,16};
	static int[] optimum = {58,177,71,155,60,36,13,26};
	static int[] maximum = {78,240,96,210,82,50,18,36};
	static int[] consumption = {35,105,42,91,35,21,7,1};
	static int[] currentLevels = {50,130,60,150,50,30,8,20};

	public static void main(String[] args) {

		try {
			BufferedReader reader = new BufferedReader(new FileReader("/Users/markopavlic/Downloads/evaluation_274.txt"));
		    String line;
		    line=reader.readLine();
		    System.out.println(line);}
		    return;
		    /*while ((line = reader.readLine()) != null) {
		    	Donor newDonor = new Donor();
		    	newDonor.setParameters(line);
		    	//donors.add(newDonor);

		    }
		    reader.close();
		}
		catch (Exception e) {
		    System.err.format("Exception occurred trying to read eval");
		    e.printStackTrace();
		    System.exit(1);
		}*/


		IDs = new ArrayList<>();

		allDonors = new ArrayList<>();

		getDonors(allDonors,"/Users/markopavlic/Downloads/donors.txt");

		for (int i = 0; i < optimum.length; i++) {
			availableDonors = new ArrayList<>();
			getAvailableDonors(availableDonors, allDonors, bloodTypes[i]);
			setPercentage(availableDonors);
			Collections.sort(availableDonors, new Comparator<Donor>(){
				public int compare (Donor d1, Donor d2){
					return (int)( d1.getProbability() - d2.getProbability() );
				}
			});
			System.out.println("Min je "+minimum[i]+", max je "+maximum[i]+", optimum je "
					+ optimum[i] +", potrosnja je "+consumption[i] + ", a trenutno "+currentLevels[i]);
			int N = getNumberOfWantedDonors(availableDonors,
					minimum[i],optimum[i], maximum[i],consumption[i],currentLevels[i]);
			System.out.println("Za krvnu grupu "+bloodTypes[i].toString()+" zelimo "+ N+" ljudi pitat.");
			for (int j = 0; j < N; j++) {
				IDs.add(availableDonors.get(j).getId());
			}
		}

		PrintWriter writer = null;
		try {
			writer = new PrintWriter("/Users/markopavlic/Downloads/izlaz.txt", "UTF-8");
		} catch (FileNotFoundException | UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		for (int i = 0; i < IDs.size(); i++) {
			writer.print(IDs.get(i));
			if(i!=IDs.size()-1) writer.print(",");
		}
		writer.close();



	}

	private static void setPercentage(ArrayList<Donor> availableDonors) {
		//fuzzy logic
		for (Donor donor : availableDonors) {
			float probability =  (float)(donor.getFreq()/4.0);
			if(donor.distance<5) donor.setProbability(probability);
			else if (donor.distance>=5 && donor.distance<10) donor.setProbability((float) (probability*0.9));
			else if (donor.distance>=10 && donor.distance<20) donor.setProbability((float) (probability*0.75));
			else if (donor.distance>=20 && donor.distance<40) donor.setProbability((float) (probability*0.55));
			else if (donor.distance>=40 && donor.distance<80) donor.setProbability((float) (probability*0.38));
			else if (donor.distance>=80 && donor.distance<160) donor.setProbability((float) (probability*0.15));
			else donor.setProbability((float) (probability*0.01));
		}
	}

	private static int getNumberOfWantedDonors(ArrayList<Donor> availableDonors, int min,
			int opt, int max, int consumption, int currentLevel) {
		return goldenSectionSearch(availableDonors, opt-(currentLevel-consumption),
				max-(currentLevel-consumption));
	}

	private static int goldenSectionSearch(ArrayList<Donor> availableDonors,int min, int max) {
		System.out.println("Min i max su "+min+","+max);
		float a=min;
		float b=max;
		float c=0;
		float d=0;
		float k =(float) ((Math.sqrt(5)-1)/2.0);
		float fc=0;
		float fd=0;
		float e=2;
		float collectivePercentage = 0;
		for (Donor donor : availableDonors) {
			collectivePercentage+=donor.getProbability();
		}
		collectivePercentage/=availableDonors.size();
		c=b-k*(b-a);
		d=a-k*(b-a);
		fc=c*collectivePercentage;
		fd=d*collectivePercentage;
		while((b-a)>e){
			if(fc<fd){
				b=d;
				d=c;
				c=b-k*(b-a);
				fd=fc;
				fc=c*collectivePercentage;
			} else {
				a=c;
				c=d;
				d=a+k*(b-a);
				fc=fd;
				fd=d*collectivePercentage;
			}
		}
		return (int)((a+b)/2);
	}

	private static void getAvailableDonors(ArrayList<Donor> availableDonors,
			ArrayList<Donor> allDonors, String bloodType) {
		for (Donor donor : allDonors) {
			if(bloodType.equals(donor.getBloodType().toString())){
				if( (donor.getSex().toString().equals("M") && donor.getDaysPassed()<90)
						|| ( donor.getSex().toString().equals("Z") && donor.getDaysPassed()<120 ) ){
					Donor newDonor = new Donor(donor);
					availableDonors.add(newDonor);
				}
			}
		}
		return;
	}

	private static void getDonors(ArrayList<Donor> donors, String inputPath) {

		try {
			BufferedReader reader = new BufferedReader(new FileReader(inputPath));
		    String line;
		    reader.readLine();
		    while ((line = reader.readLine()) != null) {
		    	Donor newDonor = new Donor();
		    	newDonor.setParameters(line);
		    	donors.add(newDonor);

		    }
		    reader.close();
		}
		catch (Exception e) {
		    System.err.format("Exception occurred trying to read '%s'.", inputPath);
		    e.printStackTrace();
		    System.exit(1);
		}

		return;

	}

}
